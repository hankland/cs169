<!DOCTYPE html>
<html>
  <head>
    <title>A New MMO</title>
  </head>
  <body>
    <center>
    <script src="/socket.io/socket.io.js"></script>
    <script type='text/javascript' src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

    <div id="charbox" style="float:top;width:300px;overflow-x:visible;margin:3px 3px 3px 3px;padding:1px 1px 1px 1px;border:3px solid black;background-color:gold;" class="box">
      <div id="char" style="float:center;">
        <p>
          <span id="charname"></span><br />
          <span id="charlvl"></span> &diams; 
          <span id="charhp"></span> &diams; 
          <span id="charmp"></span>
        </p>
      </div>
    </div>

    <script>
      var socket = io.connect('/');

      /* Move the appropriate character on the overworld. */
      socket.on('move', function(data) {
        if (data.name === myname) {
          boxman.x = boxman.newx = data.xpos;
          boxman.y = boxman.newy = data.ypos;
          boxman.loc = boxman.newloc = data.location;
          var battleDice = Math.floor((Math.random() * ENCOUNTER_RATE) + 1);
          if (battleDice == ENCOUNTER_RATE) {
            window.location.href = '/battle';
          }
        } else {
          for (var i = 0; i < players.length; i++) {
            if (data.name === players[i].name) {
              break;
            }
          }
          players[i] = data;
        }
        should_render = true;
      });

      /* Update the area and render it. */
      socket.on('getmap', function(data) {
        areamap = data.areamap;
        areaname = data.areaname;
        should_render = true;
      });

      /* Retrieve Portal Locations and Destinations */
      socket.on('getportals', function(data) {
        if (areaname == "forest") {
          portals = data.forest;
        } else if (areaname == "mountain") {
          portals = data.mountain;
        } else if (areaname == "smallArea") {
          portals = data.smallArea;
        } else if (areaname == "largeArea") {
          portals = data.largeArea;
        } else {
          portals = {};
        }
      });

      /* Retrieve character name. */
      socket.on('name', function(data) {
        myname = data.name;
      });

      /* Disconnect from the game. */
      socket.on('disconnect', function() {
        // alert("You've left the overworld.");
      });

      /* Emit stuff. */
      socket.emit('name', {});
      socket.emit('getmap', {});
      socket.emit('getportals', {});
    </script>

    <canvas id="myCanvas" width="500" height="500" style="overflow:hidden;border:1px solid #c3c3c3;">
    Your browser does not support the HTML5 canvas tag.
    </canvas>

    <script>
      var boxman = {
          x: <%= character.xpos %>,
          y: <%= character.ypos %>,
          newx: <%= character.xpos %>,
          newy: <%= character.ypos %>,
          loc: areaname,
          newloc: areaname
      };
      var direction = "down";

      var should_render;
      var keysDown = {};
      
      //Character information
      var myname = "";
      var myhp = <%= character.health_points %>;
      var mylvl = <%= character.level %>;
      
      var areamap = "";
      var areaname = "";
      var portals = [];
      players = new Array();

      var c = document.getElementById("myCanvas");
      var ctx = c.getContext("2d");

      var AREA_WIDTH = 20; // x-dimension size
      var AREA_HEIGHT = 20; // y-dimension size
      var TILE_SIZE = 25; // side of a single area tile
      var ENCOUNTER_RATE = 30; // odds of random battle encounter (higher => less likely)
      
      /* Handles key presses. */
      addEventListener("keydown", function (e) {
          keysDown[e.keyCode] = true;
      }, false);

      /* Handles key releases. */
      addEventListener("keyup", function (e) {
          delete keysDown[e.keyCode];
      }, false);      

      /* Update character location information. */
      var update = function () { 
          if (38 in keysDown) { // Player holding up
              boxman.newy = boxman.y - 1;
              boxman.newx = boxman.x;
              if (areamap[boxman.newy * AREA_HEIGHT + boxman.newx + 1] == 'B') {
                boxman.newy = boxman.y;
                boxman.newx = boxman.x;
              }
              direction = "up";
          }
          if (40 in keysDown) { // Player holding down
              boxman.newy = boxman.y + 1;
              boxman.newx = boxman.x;
              if (areamap[boxman.newy * AREA_HEIGHT + boxman.newx + 1] == 'B') {
                boxman.newy = boxman.y;
                boxman.newx = boxman.x;
              }
              direction = "down";
          }
          if (37 in keysDown) { // Player holding left
              boxman.newy = boxman.y;
              boxman.newx = boxman.x - 1;
              if (areamap[boxman.newy * AREA_HEIGHT + boxman.newx + 1] == 'B') {
                boxman.newy = boxman.y;
                boxman.newx = boxman.x;
              }
              direction = "left";
          }
          if (39 in keysDown) { // Player holding right
              boxman.newx = boxman.x + 1;
              boxman.newy = boxman.y;
              if (areamap[boxman.newy * AREA_HEIGHT + boxman.newx + 1] == 'B') {
                boxman.newy = boxman.y;
                boxman.newx = boxman.x;
              }
              direction = "right";
          }
          // Prevent character from passing area boundaries
          if (boxman.newy < 0) { boxman.newy = 0; }
          if (boxman.newx < 0) { boxman.newx = 0; }
          if (boxman.newy >= AREA_HEIGHT) { boxman.newy = AREA_HEIGHT - 1; }
          if (boxman.newx >= AREA_WIDTH) { boxman.newx = AREA_WIDTH - 1; }
          for (var i = 0; i < portals.length; i++) {
            if (portals[i] != {} && boxman.newx == portals[i].xpos && boxman.newy == portals[i].ypos) {
              boxman.newloc = portals[i].destination;
              boxman.newx = portals[i].newxpos;
              boxman.newy = portals[i].newypos;
              break;
            }
          }
      };
      
      /* Draw out the game overworld. */
      var render = function () {
        if (should_render) {
          ctx.clearRect(0, 0, TILE_SIZE * AREA_WIDTH, TILE_SIZE * AREA_HEIGHT);
          
          var img1 = new Image();
          var img2 = new Image();
          var img3 = new Image();

          //Terrain Choice
          if (areamap[0] == 'F') { 
            img1.src = "/images/ForestFloor.png";
            img2.src = "/images/ForestWall.png";
            img3.src = "/images/Portal.png";
          } else if (areamap[0] == 'M') {
            img1.src = "/images/MountainFloor.png";
            img2.src = "/images/MountainWall.png";
            img3.src = "/images/Portal.png";
          }
          var floor = ctx.createPattern(img1,"repeat");
          var wall = ctx.createPattern(img2,"repeat");
          var portal = ctx.createPattern(img3,"repeat");
          
          
          // Draw the area's terrain
          for(var i = 0; i < areamap.length-1; i++) {
              var x = i % AREA_WIDTH;
              var y = (i - x) / AREA_WIDTH;
              ctx.fillStyle = floor;
              if (areamap[i+1] == 'A') {
                ctx.fillRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
              }
          }
          for(var i = 0; i < areamap.length-1; i++) {
              var x = i % AREA_WIDTH;
              var y = (i - x) / AREA_WIDTH;
              ctx.fillStyle = wall;
              if (areamap[i+1] == 'B') {
                ctx.fillRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
              }
          }
          for(var i = 0; i < areamap.length-1; i++) {
              var x = i % AREA_WIDTH;
              var y = (i - x) / AREA_WIDTH;
              ctx.fillStyle = portal;
              if (areamap[i+1] == 'C') {
                ctx.fillRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
              }
          }
          // Draw currently logged-in character
          var img4 = new Image();
          img4.src = "/images/chars.png";
          
          if (direction == "left") {
            ctx.drawImage(img4, 25, 0, 25, 25, boxman.x * TILE_SIZE, boxman.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
          } else if (direction == "right") {
            ctx.drawImage(img4, 75, 0, 25, 25, boxman.x * TILE_SIZE, boxman.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
          } else if (direction == "up") {
            ctx.drawImage(img4, 50, 0, 25, 25, boxman.x * TILE_SIZE, boxman.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
          } else {
            ctx.drawImage(img4, 0, 0, 25, 25, boxman.x * TILE_SIZE, boxman.y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
          }
          
          
          // Draw all other characters
          for (var i = 0; i < players.length; i++) {
             player = players[i];
             ctx.drawImage(img4, 25, 25, 25, 25, player.xpos * TILE_SIZE, player.ypos * TILE_SIZE, TILE_SIZE, TILE_SIZE);
          }

          // Draw the area's grid
          for (var x = 0; x <= AREA_WIDTH * TILE_SIZE; x += TILE_SIZE) {
              ctx.moveTo(x, 0);
              ctx.lineTo(x, AREA_HEIGHT * TILE_SIZE);
          }
          for (var y = 0; y <= AREA_HEIGHT * TILE_SIZE; y += TILE_SIZE) {
              ctx.moveTo(0, y);
              ctx.lineTo(AREA_WIDTH * TILE_SIZE, y);
          }
          ctx.strokeStyle = "black";
          ctx.stroke();

          should_render = false;
        }
      };

      /* Display the character's information. */
      var displayinfo = function () {
        $('#charname').html("<b><%= character.name %></b>");
        $('#charlvl').html("Lvl. <%= character.level %>");
        $('#charhp').html("HP: <%= character.current_health_points %> / <%= character.health_points %>");
        $('#charmp').html("MP: <%= character.current_magic_points %> / <%= character.magic_points %>");
      };

      /* Update character information and graphical display. */
      var main = function () {
          update();
          render();
          displayinfo();
      };

      /* Move the character's location, if desired. */
      var move = function () {
          if (boxman.newx != boxman.x || boxman.newy != boxman.y || boxman.newloc != boxman.loc) {
            socket.emit('move', { xpos: boxman.newx, ypos: boxman.newy, location: boxman.newloc});
          }
          socket.emit('getmap', {});
          socket.emit('getportals', {});
      };

      /* Set the rate at which we should call each method. */
      setInterval(main, 1);
      setInterval(move, 100);
    </script>
    
    <div id="menu">
      <form>
        <p>
          <!-- <input id="battle" type="button" value="Start Instant Battle" onclick="window.location.href ='/battle';"> -->
          <input id="logout" type="button" value="Logout" onclick="window.location.href ='/logout';">
        </p>
      </form>
    </div>
    

    
    </center>
  </body>
</html>
